1. Real life Examples for aggregation and Composition.

2. Problem on Loops:
Retail Shopping Application with Enhanced Rules.

You are tasked with developing a retail shopping application for generating itemized invoices, applying business rules for discounts, surcharges, and quantities, and providing a seamless customer experience.

The application unfolds across levels, each introducing new functionality, culminating in a complete solution that includes invoice generation and a breakdown of purchases.

Levels:
Level 1: Basic Item Entry and Total Calculation
Objective: Allow the user to input item details (code, description, quantity, price) and calculate the total cost for the item.

Key Steps:
1. Accept item code, description, quantity, and price.
2. Compute the total for a single item.
3. Display the total for the item.

Level 2: Iterative Item Entry and Grand Total
Objective: Enable multiple items to be added iteratively, and compute the grand total for all items.

Key Steps:
1. Use a loop to accept details for multiple items.
2. Compute the grand total by summing individual totals.
3. Display the grand total after all items have been entered.

Level 3: Applying Discounts and Surcharges
Objective: Introduce business rules for modifying the grand total based on conditions.

Rules Implemented:
1. Discount: If the grand total exceeds ₹10,000, apply a 10% discount.
2. Surcharge: If the grand total is less than ₹1,000 and payment is by card, apply a 2.5%
surcharge.
3. Quantity Discount: If the total quantity exceeds 20, apply an additional 5% discount on the
grand total (after other discounts).

Key Steps:
1. Check conditions for discounts and surcharges.
2. Adjust the grand total accordingly.
3. Display the modified total with adjustments explained.

Level 4: Membership Discounts
Objective: Introduce a membership system where customers get an additional discount.

Rules Implemented:
1. If the customer is a member (choice: 'y'), apply an additional 2% discount on the grand total
after all other adjustments.

Key Steps:
1. Prompt the user for membership status.
2. Apply the membership discount if applicable.
3. Update and display the final grand total.
----------------------------------------------------
Solve the below programs using Singleton class. Add the main() in a seperate class. The I/P data must be taken in instance variables. Make the Singleton class as POJO class for easier reading and writing of the object.

1. Write a program to print Prime numbers between M and N (M < N)
2. Write a program to print the Nth Fibo term. Assume 1 and 2 as 1st 2 terms respectively.
3. Print the Nth term if the series: 1 2 2 3 3 5 5 7 8 11 13 13

I/Ps:
originalString = "aditya"
rotatedString = 'tyaadi'

tempString = rS + rS;
if tempString.subString(originalString);
    stmt
esle
    stmt
------------------------------------------
1. IIT Kharagpur Sorting technique
2. Selection sort implementation, efficiency and optimazation
--------------------------------------
1. Implement Stack using ArrayList perform both operations at front
push() pop() displatStack()
2. Implement Queue using ArrayList, insert at front and delete from rear
enQueue() deQueue() displayQueue()
3. Implement Queue using ArrayList, insert at rear and delete from front
4. Multi elevator Optimized algorithm.

Linked List Problems:
1. Implement the following operations on a SLL:
    insert node at rear
    insert node at front
    insert node at position
    delete node from rear
    delete node from front
    delete node from position
    display list
        from front to rear
        from rear to front (recursive)
2. Implement Stack using SLL
    Do both the operations (psuh and pop) at rear
    Do both the operations (psuh and pop) at front
3. Implement Queue using SLL
    Insert at rear, delete from front
    Insert at front, delete from rear
4. Reverse a singly LL
5. Reverse a DLL
6. Merge 2 sorted SLLs into one sorted list
7. Check if to S(D)LLs converges at some point.
8. Seperate the given SLL into 2 respectively having Prime numbers and composite numbers.

Problem Solving Skills Improvement Step by Step:
1. Single line instructions (sum=, product=..., arithmetic expressions)
2. Conditional problem solving (simple if, if-else, nested if-else, complicated nesting)
3. O(n) problem solving on loops
4. O(n2) problem solving on loops
5. O(n) probl;em solving on Arrays and strings
6* Implement the string handling methods.
7* Linked List probelms
8** Scenario based problem solving
9* CRUD operations probelm
10** Real life problems
--------------------------------------------
